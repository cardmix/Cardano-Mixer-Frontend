From ece29d689b56e51b22b39c8d0b8740e325830f23 Mon Sep 17 00:00:00 2001
From: Luigy Leon <luigy@outlook.com>
Date: Fri, 6 Oct 2017 18:39:35 -0400
Subject: [PATCH] text-jsstring

---
 buffer-builder.cabal      |  3 +++
 src/Data/BufferBuilder.hs | 25 +++++++++++++++++++++++--
 2 files changed, 26 insertions(+), 2 deletions(-)

diff --git a/buffer-builder.cabal b/buffer-builder.cabal
index fe24f73..868d3c1 100644
--- a/buffer-builder.cabal
+++ b/buffer-builder.cabal
@@ -65,6 +65,9 @@ library
   if !impl(ghc >= 8.0)
     build-depends: semigroups
 
+  if impl(ghcjs)
+    build-depends: ghcjs-base
+
   default-language: Haskell2010
   ghc-options: -O2 -Wall
   --ghc-options: -ddump-ds -ddump-simpl -ddump-stg -ddump-opt-cmm -ddump-asm -ddump-to-file
diff --git a/src/Data/BufferBuilder.hs b/src/Data/BufferBuilder.hs
index 30b39ce..0468afb 100644
--- a/src/Data/BufferBuilder.hs
+++ b/src/Data/BufferBuilder.hs
@@ -1,4 +1,7 @@
-{-# LANGUAGE OverloadedStrings, MagicHash, BangPatterns, RecordWildCards, DeriveDataTypeable #-}
+{-# LANGUAGE OverloadedStrings, MagicHash, BangPatterns, RecordWildCards, DeriveDataTypeable, CPP #-}
+#ifdef ghcjs_HOST_OS
+{-# LANGUAGE UnboxedTuples, ForeignFunctionInterface, UnliftedFFITypes #-}
+#endif
 
 {-|
 A library for efficiently building up a buffer of data.  When given data
@@ -71,6 +74,9 @@ import Data.Typeable (Typeable)
 import Data.Text () -- Show
 import Data.Text.Internal (Text (..))
 import Data.Text.Array (Array (..))
+#ifdef ghcjs_HOST_OS
+import Data.JSString
+#endif
 
 data Handle'
 type Handle = Ptr Handle'
@@ -349,8 +355,17 @@ appendEscapedJsonLiteral addr =
 {-# INLINE appendEscapedJsonLiteral #-}
 
 appendEscapedJsonText :: Text -> BufferBuilder ()
+#ifndef ghcjs_HOST_OS
 appendEscapedJsonText !(Text arr ofs len) =
-    let byteArray = aBA arr
+    let
+#else
+appendEscapedJsonText !(Text t) =
+    let (# ba#, len# #) = js_fromString t
+        len = I# len#
+        arr = Array ba#
+        ofs = 0
+#endif
+        byteArray = aBA arr
     in withHandle $ \h ->
         bw_append_json_escaped_utf16 h len (Ptr (byteArrayContents# byteArray) `plusPtr` (2 * ofs))
 {-# INLINE appendEscapedJsonText #-}
@@ -364,3 +379,9 @@ appendUrlEncoded !(BS.PS (ForeignPtr addr _) offset len) =
     withHandle $ \h ->
         bw_append_url_encoded h len (plusPtr (Ptr addr) offset)
 {-# INLINE appendUrlEncoded #-}
+
+#ifdef ghcjs_HOST_OS
+foreign import javascript unsafe
+  "h$textFromString"
+  js_fromString :: JSString -> (# ByteArray#, Int# #)
+#endif
-- 
2.31.1

